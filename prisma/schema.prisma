generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MBSCD {
  bscd       String @id @unique @db.VarChar(2)
  bscdDetail String @db.VarChar(100)
  bscdItems  BSCD[]
}

model BSCD {
  bscd       String  @unique @db.VarChar(2)
  mbscd      String  @db.VarChar(2)
  bscdDetail String  @db.VarChar(100)
  mainBscd   MBSCD   @relation(fields: [mbscd], references: [bscd])
  macnoItems MACNO[]

  @@id([mbscd, bscd])
}

model MACNO {
  macno    String @unique @db.VarChar(3)
  bscd     String @db.VarChar(2)
  macname  String @db.VarChar(100)
  bscdRef  BSCD   @relation(fields: [bscd], references: [bscd])
  accounts ACNO[]

  @@id([bscd, macno])
}

model ACNO {
  acno               String               @unique @db.VarChar(4)
  macno              String               @db.VarChar(3)
  acname             String               @db.VarChar(100)
  bankAccountNo      String?              @map("bank_account_no") @db.VarChar(25)
  address            String?              @db.VarChar(150)
  city               String?              @db.VarChar(50)
  phoneFax           String?              @map("phone_fax") @db.VarChar(50)
  email              String?              @db.VarChar(25)
  website            String?              @db.VarChar(25)
  crDays             Int?                 @map("cr_days")
  stRate             Decimal?             @map("st_rate") @db.Decimal(15, 2)
  area               String?              @db.VarChar(50)
  category           String?              @map("catagory") @db.VarChar(50)
  subCategory        String?              @map("sub_catagory") @db.VarChar(25)
  country            String?              @db.VarChar(25)
  customerBank       String?              @map("customer_bank") @db.VarChar(50)
  customerBankAddr   String?              @map("customer_bank_addr") @db.VarChar(100)
  stRegNo            String?              @map("st_reg_no") @db.VarChar(25)
  ntnNo              String?              @map("ntn_no") @db.VarChar(25)
  contactPerson      String?              @map("contact_person") @db.VarChar(25)
  crLimit            Int?                 @map("cr_limit")
  salesArea          String?              @map("sales_ares") @db.VarChar(25)
  mainAccount        MACNO                @relation(fields: [macno], references: [macno])
  transactionsMaster TransactionsMaster[]
  transactions       Transactions[]

  @@id([macno, acno])
  @@map("acno")
}


model Company {
  id      Int     @id @default(autoincrement())
  company String? @db.VarChar(100)
  addr1   String? @db.VarChar(100)
  addr2   String? @db.VarChar(100)
  city    String? @db.VarChar(50)
  phone   String? @db.VarChar(50)
  fax     String? @db.VarChar(50)
  email   String? @db.VarChar(50)

  costCenters CostCenter[]
  departments Department[]
  TransactionsMaster TransactionsMaster[]
  users              Users[]
  godowns     Godown[]
}

model CostCenter {
  id         Int     @id @default(autoincrement())
  company_id Int // Now references Company.id (Int)
  ccname     String? @db.VarChar(50)

  company Company @relation(fields: [company_id], references: [id])
  Transaction Transactions[]
}

model Department {
  id         Int     @id @default(autoincrement())
  dept_code  String  @db.VarChar(100)
  dept_name  String? @db.VarChar(100)
  company_id Int
  company    Company @relation(fields: [company_id], references: [id])
}

model Godown {
  id         Int     @id @default(autoincrement())
  godown     String  @db.VarChar(100)
  company_id Int
  company    Company @relation(fields: [company_id], references: [id])
  Transaction Transactions[]
  TransactionsMaster TransactionsMaster[]
}

model FinancialYear {
  id        Int      @id @default(autoincrement())
  date_from DateTime
  date_to   DateTime
  status    String   @db.Char(50)
}

model Season {
  id        Int      @id @default(autoincrement())
  date_from DateTime
  date_to   DateTime
  status    String   @db.Char(50)
}

model PoPrdCat {
  id            Int    @id @default(autoincrement())
  category_name String @db.Char(50)
}

model DeliveryMode {
  id            Int    @id @default(autoincrement())
  delivery_mode String @db.Char(50)
  rate_kg       Int
}


model Users {
  user_id            String               @id @unique @db.VarChar(10)
  user_name          String?              @db.VarChar(50)
  company_id         Int                  
  company            Company              @relation(fields: [company_id], references: [id])
  transactionsMaster TransactionsMaster[]
}

model Currency {
  currency String @id @unique @db.VarChar(50)
  rate     Float
  transactions Transactions[]
}

model TransactionsMaster {
  tran_id      Int            @id @default(autoincrement())
  company_id   Int
  dateD        DateTime?
  time         DateTime?
  tran_code    Int
  vr_no        Int            @unique
  pycd         String
  check_no     String?        @map("CHECK_NO")
  check_date   DateTime?      @map("CHECK_DATE")
  rmk          String?        @map("RMK")
  rmk1         String?        @map("RMK1")
  rmk2         String?        @map("RMK2")
  rmk3         String?        @map("RMK3")
  rmk4         String?        @map("RMK4")
  rmk5         String?        @map("RMK5")
  userId       String         @map("USER_ID")
  invoice_no   String?        @db.Char(150)
  godown       Int?            
  acno         ACNO           @relation(fields: [pycd], references: [acno])
  company      Company        @relation(fields: [company_id], references: [id])
  user         Users          @relation(fields: [userId], references: [user_id])
  godownDetails Godown?     @relation(fields: [godown], references: [id])
  transactions Transactions[]

    @@map("TRANSACTIONS_MASTER")

}

model Item {
  itcd         Int            @id @unique
  item_name    String?        @db.VarChar(50)
  Transactions Transactions[]
}

model Transactions {
  tran_id            Int                @id @default(autoincrement())
  acno               String
  itcd               Int
  ccno               Int
  narration1         String?            @db.Char(150)
  narration2         String?            @db.Char(150)
  narration3         String?            @db.Char(150)
  narration4         String?            @db.Char(150)
  narration5         String?            @db.Char(150)
  chno               String?            @db.Char(150)
  check_date         DateTime?
  party_name         String?            @db.Char(150)
  damt               Float?
  camt               Float?
  qty                Float?
  rate               Float?  
  wht_rate           Float?
  st_rate            Float?
  godown             Int
  invoice_no         String?            @db.Char(150)
  sub_tran_id        Int                @default(1) // 1 for Payment block, 2 for deduction block
  currency           String             @db.Char(50)
  fc_amount          Float
  no_of_pack         Int? 
  qty_per_pack       Int?
  st_amount          Int?
  additional_tax     Int?

  transactionsMaster TransactionsMaster @relation(fields: [tran_id], references: [tran_id])
  acnoDetails        ACNO               @relation(fields: [acno], references: [acno])
  itemDetails        Item               @relation(fields: [itcd], references: [itcd])
  costCenter         CostCenter         @relation(fields: [ccno], references: [id])
  godownDetails      Godown            @relation(fields: [godown], references: [id])
  currencyDetails    Currency           @relation(fields: [currency], references: [currency])
}

model DeliveryTerm {
  id            Int    @id @default(autoincrement())
  delivery_term String @db.Char(50)
}

model CommissionTerm {
  id            Int    @id @default(autoincrement())
  commission_term String @db.Char(50)
}

model Employee {
  id               String     @id @default(uuid()) @map("id")
  first_name       String     @map("first_name")
  middle_name      String?    @map("middle_name")
  surname          String     @map("surname")
  dob              DateTime   @map("dob")
  gender           Gender?    @map("gender")
  phone_number     String     @map("phone_number")
  npf_number       String     @map("npf_number")
  email_address    String     @map("email_address")
  village          String     @map("village")
  status           Status?    @map("status")
  hire_date        DateTime   @map("hire_date")
  job_title        String     @map("job_title")
  department       String     @map("department")
  work_location    String     @map("work_location")
  manager_id       String?    @map("manager_id")
  manager          Manager?   @relation(fields: [manager_id], references: [id])
  client_id        String     @map("client_id")
  employer         Employer   @relation(fields: [client_id], references: [employer_id])
  employee_id      String     @unique @map("employee_id")
  payment_method   PaymentMethod? @map("payment_method")
  bank_name        String?    @map("bank_name")
  account_name     String?    @map("account_name")
  account_number   String?    @map("account_number")
  pay_type         PayType?   @map("pay_type")
  rate_per_hour    Float      @map("rate_per_hour")
  pay_frequency    PayFrequency? @map("pay_frequency")
  employee_type    String     @map("employee_type")
  cost_center      String     @map("cost_center")
  allownces        Json       @map("allownces")
  allownce_eligible Boolean    @default(false) @map("allownce_eligible")
  deductions       Json       @map("deductions")
  leaves           Leave[]
  profile_image    String?    @map("profile_image")
  documents        Document[]
  created_on       DateTime   @default(now()) @map("created_on")
  updated_on       DateTime   @updatedAt @map("updated_on")
}

model Leave {
  id         String   @id @default(uuid())
  leave_id   String   @map("leave_id")
  available  Float    @map("available")
  employee   Employee @relation(fields: [employee_id], references: [id])
  employee_id String   @map("employee_id")
}

model Document {
  id          String   @id @default(uuid())
  url         String   @map("url")
  name        String   @map("name")
  description String?  @map("description")
  employee    Employee @relation(fields: [employee_id], references: [id])
  employee_id String   @map("employee_id")
}

model Manager {
  id        String     @id @default(uuid())
  employees Employee[]
}

model Employer {
  employer_id String     @id @map("employer_id")
  employees   Employee[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum PaymentMethod {
  CASH
  DIRECT_DEPOSIT
  CHEQUE
}

enum PayType {
  HOUR
  SALARY
}

enum PayFrequency {
  Monthly
  Fortnightly
  Weekly
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String               @unique
  emailVerified      DateTime?
  password           String?
  image              String?
  role               Role                 @default(CASHIER)
  isActive           Boolean              @default(true)
  shiftId            Int?
  shift              Shift?               @relation(fields: [shiftId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  accounts           Account[]
  sessions           Session[]
  orderMaster        OrderMaster[]
  transactionsMaster TransactionsMaster[] @relation("UserTransactions")
}

model Shift {
  id        Int      @id @default(autoincrement())
  name      String
  startTime String
  endTime   String
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  MANAGER
  CASHIER
  ACCOUNTANT
}

model MBSCD {
  mbscd       String @id @unique @db.VarChar(2)
  mbscdDetail String @db.VarChar(100)
  bscdItems   BSCD[]
}

model BSCD {
  bscd       String  @unique @db.VarChar(2)
  mbscd      String  @db.VarChar(2)
  bscdDetail String  @db.VarChar(100)
  mainBscd   MBSCD   @relation(fields: [mbscd], references: [mbscd])
  macnoItems MACNO[]

  @@id([mbscd, bscd])
}

model MACNO {
  macno    String @unique @db.VarChar(3)
  bscd     String @db.VarChar(2)
  macname  String @db.VarChar(100)
  bscdRef  BSCD   @relation(fields: [bscd], references: [bscd])
  accounts ACNO[]

  @@id([bscd, macno])
}

model ACNO {
  acno               String               @unique @db.VarChar(4)
  macno              String               @db.VarChar(3)
  acname             String               @db.VarChar(250)
  bankAccountNo      String?              @map("bank_account_no") @db.VarChar(25)
  address            String?              @db.VarChar(150)
  city               String?              @db.VarChar(50)
  phoneFax           String?              @map("phone_fax") @db.VarChar(50)
  email              String?              @db.VarChar(25)
  website            String?              @db.VarChar(25)
  crDays             Int?                 @map("cr_days")
  stRate             Decimal?             @map("st_rate") @db.Decimal(15, 2)
  area               String?              @db.VarChar(50)
  category           String?              @map("catagory") @db.VarChar(50)
  subCategory        String?              @map("sub_catagory") @db.VarChar(25)
  country            String?              @db.VarChar(25)
  customerBank       String?              @map("customer_bank") @db.VarChar(50)
  customerBankAddr   String?              @map("customer_bank_addr") @db.VarChar(100)
  stRegNo            String?              @map("st_reg_no") @db.VarChar(25)
  ntnNo              String?              @map("ntn_no") @db.VarChar(25)
  contactPerson      String?              @map("contact_person") @db.VarChar(25)
  crLimit            Int?                 @map("cr_limit")
  salesArea          String?              @map("sales_ares") @db.VarChar(25)
  oderMaster         OrderMaster[]
  transactionsMaster TransactionsMaster[]
  transactions       Transactions[]
  mainAccount        MACNO                @relation(fields: [macno], references: [macno])

  @@id([macno, acno])
  @@map("acno")
}

model Company {
  id                 Int                  @id @default(autoincrement())
  company            String?              @db.VarChar(100)
  addr1              String?              @db.VarChar(100)
  addr2              String?              @db.VarChar(100)
  city               String?              @db.VarChar(50)
  phone              String?              @db.VarChar(50)
  fax                String?              @db.VarChar(50)
  email              String?              @db.VarChar(50)
  designations       Designation[]
  godowns            Godown[]
  TransactionsMaster TransactionsMaster[]
  users              Users[]
  financialYears     FinancialYear[]
  seasons            Season[]
  poPrdCats          PoPrdCat[]
  deliveryModes      DeliveryMode[]
  deliveryTerms      DeliveryTerm[]
  commissionTerms    CommissionTerm[]
  // employees          Employee[]
  costCenters        CostCenter[]
  departments        Department[]
  WorkLocation       WorkLocation[]
  Bank               Bank[]
  job_titles         JobTitle[]
  Allowance          Allowance[]
  Leave              Leave[]
  Deduction          Deduction[]
  Manager            Manager[]
}

model ProductMasterCategory {
  id            Int            @id @default(autoincrement())
  pmc_name      String?        @db.VarChar(250)
  productGroups ProductGroup[]
}

model ProductGroup {
  id                      Int                   @id @default(autoincrement())
  pg_name                 String?               @db.VarChar(250)
  pmc_id                  Int
  productCategories       ProductCategory[]
  ProductMasterCategories ProductMasterCategory @relation(fields: [pmc_id], references: [id])
}

model ProductCategory {
  id             Int            @id @default(autoincrement())
  pc_name        String?        @db.VarChar(250)
  pg_id          Int
  mainCategories MainCategory[]
  ProductGroups  ProductGroup   @relation(fields: [pg_id], references: [id])
}

model MainCategory {
  id                Int             @id @default(autoincrement())
  mc_name           String?         @db.VarChar(100)
  pc_id             Int
  itemCategories    ItemCategory[]
  ProductCategories ProductCategory @relation(fields: [pc_id], references: [id])
}

model ItemCategory {
  id             Int          @id @default(autoincrement())
  ic_name        String       @db.VarChar(250)
  mc_id          Int
  wc_category_id Int?         @unique
  stock_acno     Int?         @default(4) // New field for stock account number
  sale_acno      Int?         @default(14)
  pos_acno       Int?         @default(15)
  cogs_acno      Int?
  sync_status    String?      @default("synced") @db.VarChar(20)
  last_sync      DateTime?    @default(now())
  mainCategory   MainCategory @relation(fields: [mc_id], references: [id])
  items          Item[]
}

model Item {
  itcd           Int            @id @unique @default(autoincrement())
  item           String?        @db.VarChar(250)
  ic_id          Int
  sku            String?        @unique
  price          Float?
  stock          Int?
  description    String?        @db.VarChar(500)
  wc_product_id  Int?           @unique
  image_url      String?        @db.VarChar(500) // New field for product image
  wc_parent_id   Int?
  sync_status    String?        @default("synced")
  last_sync      DateTime?
  orderMaster    OrderDetail[]
  itemCategories ItemCategory   @relation(fields: [ic_id], references: [id])
  Transactions   Transactions[]
}

model Designation {
  id         Int     @id @default(autoincrement())
  desg_name  String? @db.VarChar(100)
  company_id Int
  company    Company @relation(fields: [company_id], references: [id])
}

model Godown {
  id                 Int                  @id @default(autoincrement())
  godown             String               @db.VarChar(100)
  company_id         Int
  company            Company              @relation(fields: [company_id], references: [id])
  TransactionsMaster TransactionsMaster[]
  OrderMaster        OrderMaster[]
  Transaction        Transactions[]
}

model FinancialYear {
  id         Int      @id @default(autoincrement())
  date_from  DateTime
  date_to    DateTime
  status     String   @db.Char(50)
  company_id Int
  company    Company  @relation(fields: [company_id], references: [id])
}

model Season {
  id         Int      @id @default(autoincrement())
  date_from  DateTime
  date_to    DateTime
  status     String   @db.Char(50)
  company_id Int
  company    Company  @relation(fields: [company_id], references: [id])
}

model PoPrdCat {
  id            Int     @id @default(autoincrement())
  category_name String  @db.Char(50)
  company_id    Int
  company       Company @relation(fields: [company_id], references: [id])
}

model DeliveryMode {
  id            Int     @id @default(autoincrement())
  delivery_mode String  @db.Char(50)
  rate_kg       Int
  company_id    Int
  company       Company @relation(fields: [company_id], references: [id])
}

model Users {
  user_id    String  @id @unique @db.VarChar(10)
  user_name  String? @db.VarChar(50)
  company_id Int
  company    Company @relation(fields: [company_id], references: [id])
}

model Currency {
  id           Int            @id @unique @default(autoincrement())
  currency     String         @unique @db.VarChar(50)
  transactions Transactions[]
}

model OrderMaster {
  order_no                Int           @id @default(autoincrement())
  dateD                   DateTime      @default(now())
  godown                  Int?
  userId                  String?       @db.VarChar(25)
  status                  Int // 1 or 2
  due_date                DateTime?
  party_code              String
  delivery_terms          String?       @db.VarChar(25)
  payment_terms           String?       @db.VarChar(25)
  delivery_location       String?       @db.VarChar(500)
  order_catagory          Int // 4 = purchase order, 6 = sales order
  additional_instructions String?       @db.VarChar(500)
  godownDetails           Godown?       @relation(fields: [godown], references: [id])
  acno                    ACNO?         @relation(fields: [party_code], references: [acno])
  users                   User?         @relation(fields: [userId], references: [id])
  orderDetails            OrderDetail[]
}

model OrderDetail {
  id           Int         @id @default(autoincrement())
  order_no     Int
  itcd         Int
  no_of_packs  Int
  qty_per_pack Int
  qty          Int // Derived from no_of_packs * qty_per_pack (can be computed manually or through trigger)
  unit         String?     @db.VarChar(25)
  rate         Float
  amount       Float
  items        Item        @relation(fields: [itcd], references: [itcd])
  orderMaster  OrderMaster @relation(fields: [order_no], references: [order_no])
}

model TransactionsMaster {
  tran_id       Int            @id @default(autoincrement())
  company_id    Int?
  dateD         DateTime?
  time          DateTime?
  tran_code     Int?
  vr_no         Int?
  po_no         Int?
  so_no         Int?
  pycd          String?
  check_no      String?        @map("CHECK_NO")
  check_date    DateTime?      @map("CHECK_DATE")
  rmk           String?        @map("RMK")
  rmk1          String?        @map("RMK1")
  rmk2          String?        @map("RMK2")
  rmk3          String?        @map("RMK3")
  rmk4          String?        @map("RMK4")
  rmk5          String?        @map("RMK5")
  userId        String?        @map("USER_ID")
  invoice_no    String?        @db.Char(150)
  godown        Int?
  godown2       Int?
  user          User?          @relation("UserTransactions", fields: [userId], references: [id])
  company       Company?       @relation(fields: [company_id], references: [id])
  godownDetails Godown?        @relation(fields: [godown], references: [id])
  acno          ACNO?          @relation(fields: [pycd], references: [acno])
  transactions  Transactions[]
  wc_order_id   Int?           @unique
  sync_status   String?        @default("synced") @db.VarChar(20)
  last_sync     DateTime?      @default(now())

  @@unique([tran_code, vr_no]) // Enforces no duplicate voucher numbers per tran_code
  @@map("TRANSACTIONS_MASTER")
}

model Transactions {
  id                 Int                @id @default(autoincrement())
  tran_id            Int
  acno               String?
  itcd               Int?
  ccno               Int?
  po_qty             Float? // Add this line to track original PO quantity for purchase
  so_qty             Float? // Add this line to track original SO quantity for sales
  narration1         String?            @db.Char(150)
  narration2         String?            @db.Char(150)
  narration3         String?            @db.Char(150)
  narration4         String?            @db.Char(150)
  narration5         String?            @db.Char(150)
  chno               String?            @db.Char(150)
  check_date         DateTime?
  party_name         String?            @db.Char(150)
  stock              Int?
  damt               Float?
  camt               Float?
  qty                Float?
  original_qty       Float? // Add this line to track original quantity for returns
  rate               Float?
  wht_rate           Float?
  st_rate            Float?
  godown             Int?
  invoice_no         String?            @db.Char(150)
  sub_tran_id        Int?               @default(1)
  currency           Int?
  gross_amount       Float?
  fc_amount          Float?
  no_of_pack         Float?
  qty_per_pack       Float?
  st_amount          Float?
  additional_tax     Float?
  acnoDetails        ACNO?              @relation(fields: [acno], references: [acno])
  costCenter         CostCenter?        @relation(fields: [ccno], references: [ccno])
  currencyDetails    Currency?          @relation(fields: [currency], references: [id])
  godownDetails      Godown?            @relation(fields: [godown], references: [id])
  itemDetails        Item?              @relation(fields: [itcd], references: [itcd])
  transactionsMaster TransactionsMaster @relation(fields: [tran_id], references: [tran_id])
}

model DeliveryTerm {
  id            Int     @id @default(autoincrement())
  delivery_term String  @db.Char(50)
  company_id    Int
  company       Company @relation(fields: [company_id], references: [id])
}

model CommissionTerm {
  id              Int     @id @default(autoincrement())
  commission_term String  @db.Char(50)
  company_id      Int
  company         Company @relation(fields: [company_id], references: [id])
}

model CostCenter {
  ccno           Int            @id @default(autoincrement())
  company_id     Int
  ccname         String?        @db.VarChar(50)
  cc_description String?        @db.VarChar(255)
  company        Company        @relation(fields: [company_id], references: [id])
  Transaction    Transactions[]
}

model Department {
  id               Int        @id @default(autoincrement())
  dept_name        String?    @db.VarChar(100)
  dept_description String?    @db.VarChar(255)
  company_id       Int
  company          Company    @relation(fields: [company_id], references: [id])
  job_titles       JobTitle[]
  Manager          Manager[]
}

model WorkLocation {
  id                   Int     @id @default(autoincrement())
  location_name        String? @db.VarChar(100)
  location_description String? @db.VarChar(255)
  company_id           Int
  company              Company @relation(fields: [company_id], references: [id])
}

model Bank {
  id               Int     @id @default(autoincrement())
  bank_name        String? @db.VarChar(100)
  bank_description String? @db.VarChar(255)
  company_id       Int
  company          Company @relation(fields: [company_id], references: [id])
}

model JobTitle {
  id                    Int        @id @default(autoincrement())
  job_title             String     @db.VarChar(150)
  job_title_description String     @db.VarChar(150)
  department_id         Int
  department            Department @relation(fields: [department_id], references: [id])
  company_id            Int
  company               Company    @relation(fields: [company_id], references: [id])
}

model Allowance {
  id                    Int     @id @default(autoincrement())
  allowance             String  @db.VarChar(150)
  allowance_description String  @db.VarChar(150)
  rate                  String  @db.VarChar(150)
  company_id            Int
  company               Company @relation(fields: [company_id], references: [id])
}

model Deduction {
  id                    Int     @id @default(autoincrement())
  deduction             String  @db.VarChar(150)
  deduction_description String  @db.VarChar(150)
  rate                  String  @db.VarChar(150)
  company_id            Int
  company               Company @relation(fields: [company_id], references: [id])
}

model Leave {
  id                Int      @id @default(autoincrement())
  leave             String   @db.VarChar(150)
  leave_description String   @db.VarChar(150)
  balance           Int      @default(0)
  maxCarryForward   Int      @default(15) // Default maximum 15 days carry forward
  lastUpdated       DateTime @default(now())
  company_id        Int
  company           Company  @relation(fields: [company_id], references: [id])
}

model Manager {
  id            Int        @id @default(autoincrement())
  manager       String     @db.VarChar(150)
  department_id Int
  department    Department @relation(fields: [department_id], references: [id])
  company_id    Int
  company       Company    @relation(fields: [company_id], references: [id])
}
model PeriodicAttendance {
  id                  Int   @id @default(autoincrement())
  compnayId           Int   @default(1) // Default to 1 for the main company
  employeeId          String
  dateRange           String
  totalBreakHours     String   @default("0")
  totalWorkingHours   String?
  totalDoubleTimeHours String  @default("0")
  numberOfDays        String   @default("0")
  status              String
  rejectionReason     String?  // Nullable because required only if status = "Rejected"
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  // employee           Employee @relation(fields: [employeeId], references: [id])
  // company            Company  @relation(fields: [compnayId], references: [id])
}

model PayrollProcess {
  id                 Int    @id @default(autoincrement())
  payroll_id         Int       @unique
  date_from          DateTime
  date_to            DateTime
  month_no           Int
  week_no            Int
  year               Int
  status             PayrollStatus @default(Draft)
  companyId         Int
  processedEmployees String[] // array of employee IDs
  totalAmount        Float    @default(0)

  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  // company            Company  @relation(fields: [companyId], references: [id])
}

enum PayrollStatus {
  Draft
  Pending
  PartiallyApproved
  Approved
}